// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CoreLibrary Unit Tests - MarkdownRenderServer fail to listen on retrying if port is already in use - with logger 1`] = `
[MockFunction] {
  "calls": [
    [
      "Can not listen on port %d",
      undefined,
    ],
  ],
  "results": [
    {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`CoreLibrary Unit Tests - MarkdownRenderServer serverListener can render jpg file: rendered jpeg file 1`] = `
{
  "body": "sample.jpg",
  "contentType": "image/jpeg",
  "statusCode": 200,
}
`;

exports[`CoreLibrary Unit Tests - MarkdownRenderServer serverListener can render md file - with logger 1`] = `
[MockFunction] {
  "calls": [
    [
      "MarkdownRenderServer.createRenderServer() called with options: {}",
    ],
    [
      "template: %o",
      "
<!doctype html>
<html>
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta http-equiv="X-UA-Compatible" content="ie=edge" />
        <title>Document</title>
        {{#hljs}}
        <script src="{{js}}"></script>
        <link rel="stylesheet" type="text/css" href="{{css}}" />
        {{/hljs}}
        {{#styles}}
        <link rel="stylesheet" type="text/css" href="{{.}}" />
        {{/styles}}
    </head>
    <body>
        {{#hljs}}
        <script>hljs.highlightAll();</script>
        {{/hljs}}
        {{{body}}}
    </body>
</html>
",
    ],
    [
      "contentsUrls: %o",
      [
        "/sample.jpg",
        "/sample.txt",
        "/test.css",
        "/test.md",
        "/sub/sample.txt",
        "/sub/test.md",
        "/sub2/sample.txt",
        "/sub2/test.md",
        "/sub2/sub/sample.txt",
        "/sub2/sub/test.md",
      ],
    ],
    [
      "Try to Listen on port %d",
      3001,
    ],
    [
      "reserved port: %d",
      3001,
    ],
    [
      "Listening on port %d",
      3001,
    ],
    [
      "Request: %s",
      "/test.md",
    ],
    [
      "getModel() called.",
    ],
    [
      "styles: %o",
      [
        "/test.css",
      ],
    ],
    [
      "styles: %o",
      [],
    ],
    [
      "Response for url: %s, status code: %d",
      "/test.md",
      200,
    ],
    [
      "content type: %s",
      "text/html",
    ],
  ],
  "results": [
    {
      "type": "return",
      "value": undefined,
    },
    {
      "type": "return",
      "value": undefined,
    },
    {
      "type": "return",
      "value": undefined,
    },
    {
      "type": "return",
      "value": undefined,
    },
    {
      "type": "return",
      "value": undefined,
    },
    {
      "type": "return",
      "value": undefined,
    },
    {
      "type": "return",
      "value": undefined,
    },
    {
      "type": "return",
      "value": undefined,
    },
    {
      "type": "return",
      "value": undefined,
    },
    {
      "type": "return",
      "value": undefined,
    },
    {
      "type": "return",
      "value": undefined,
    },
    {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`CoreLibrary Unit Tests - MarkdownRenderServer serverListener can render md file - with logger: rendered md file 1`] = `
{
  "body": "
<!doctype html>
<html>
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta http-equiv="X-UA-Compatible" content="ie=edge" />
        <title>Document</title>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js"></script>
        <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/github.min.css" />
        <link rel="stylesheet" type="text/css" href="/test.css" />
    </head>
    <body>
        <script>hljs.highlightAll();</script>
        <h1>test</h1>
<p>hello world</p>

    </body>
</html>
",
  "contentType": "text/html",
  "statusCode": 200,
}
`;

exports[`CoreLibrary Unit Tests - MarkdownRenderServer serverListener can render md file: rendered md file 1`] = `
{
  "body": "
<!doctype html>
<html>
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta http-equiv="X-UA-Compatible" content="ie=edge" />
        <title>Document</title>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js"></script>
        <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/github.min.css" />
        <link rel="stylesheet" type="text/css" href="/test.css" />
    </head>
    <body>
        <script>hljs.highlightAll();</script>
        <h1>test</h1>
<p>hello world</p>

    </body>
</html>
",
  "contentType": "text/html",
  "statusCode": 200,
}
`;

exports[`CoreLibrary Unit Tests - MarkdownRenderServer serverListener can render style file: rendered css file 1`] = `
{
  "body": "h1 { color: red; }",
  "contentType": "text/css",
  "statusCode": 200,
}
`;

exports[`CoreLibrary Unit Tests - MarkdownRenderServer serverListener can render txt file: rendered txt file 1`] = `
{
  "body": "hello world",
  "contentType": "text/plain",
  "statusCode": 200,
}
`;

exports[`CoreLibrary Unit Tests - MarkdownRenderServer serverListener root dir is not found - with logger 1`] = `
[MockFunction] {
  "calls": [
    [
      "Response for url: %s, status code: %d",
      "/",
      404,
    ],
  ],
  "results": [
    {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`CoreLibrary Unit Tests - MarkdownRenderServer serverListener root dir is not found - with logger: Root is Not Found 1`] = `
{
  "body": "Not Found",
  "contentType": "text/plain",
  "statusCode": 404,
}
`;

exports[`CoreLibrary Unit Tests - MarkdownRenderServer serverListener root dir is not found: Root is Not Found 1`] = `
{
  "body": "Not Found",
  "contentType": "text/plain",
  "statusCode": 404,
}
`;
